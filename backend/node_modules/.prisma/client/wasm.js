
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  urnId: 'urnId',
  role: 'role',
  avatarUrl: 'avatarUrl',
  reputationScore: 'reputationScore',
  createdAt: 'createdAt'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  collegeName: 'collegeName',
  departmentName: 'departmentName',
  hostelName: 'hostelName',
  roomNumber: 'roomNumber'
};

exports.Prisma.ItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  category: 'category',
  price: 'price',
  rentPrice: 'rentPrice',
  condition: 'condition',
  isForRent: 'isForRent',
  status: 'status',
  images: 'images',
  createdAt: 'createdAt',
  ownerId: 'ownerId'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  buyerId: 'buyerId',
  sellerId: 'sellerId',
  itemId: 'itemId',
  amount: 'amount',
  paymentId: 'paymentId',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.RentalScalarFieldEnum = {
  id: 'id',
  renterId: 'renterId',
  itemId: 'itemId',
  startDate: 'startDate',
  endDate: 'endDate',
  totalRent: 'totalRent',
  deposit: 'deposit',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.WishlistScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  createdAt: 'createdAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  itemId: 'itemId',
  rating: 'rating',
  comment: 'comment',
  createdAt: 'createdAt'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  message: 'message',
  type: 'type',
  isRead: 'isRead',
  createdAt: 'createdAt'
};

exports.Prisma.ChatMessageScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  receiverId: 'receiverId',
  content: 'content',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  name: 'name',
  email: 'email',
  password: 'password',
  urnId: 'urnId',
  avatarUrl: 'avatarUrl'
};

exports.Prisma.AddressOrderByRelevanceFieldEnum = {
  collegeName: 'collegeName',
  departmentName: 'departmentName',
  hostelName: 'hostelName',
  roomNumber: 'roomNumber'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.ItemOrderByRelevanceFieldEnum = {
  name: 'name',
  description: 'description',
  category: 'category',
  condition: 'condition',
  status: 'status'
};

exports.Prisma.TransactionOrderByRelevanceFieldEnum = {
  paymentId: 'paymentId',
  status: 'status'
};

exports.Prisma.RentalOrderByRelevanceFieldEnum = {
  status: 'status'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  comment: 'comment'
};

exports.Prisma.NotificationOrderByRelevanceFieldEnum = {
  message: 'message',
  type: 'type'
};

exports.Prisma.ChatMessageOrderByRelevanceFieldEnum = {
  content: 'content'
};
exports.UserRole = exports.$Enums.UserRole = {
  BUYER: 'BUYER',
  SELLER: 'SELLER',
  BOTH: 'BOTH'
};

exports.Prisma.ModelName = {
  User: 'User',
  Address: 'Address',
  Item: 'Item',
  Transaction: 'Transaction',
  Rental: 'Rental',
  Wishlist: 'Wishlist',
  Review: 'Review',
  Notification: 'Notification',
  ChatMessage: 'ChatMessage'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/ananya/Desktop/The-campus-closet/backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin-arm64",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/ananya/Desktop/The-campus-closet/backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nenum UserRole {\n  BUYER\n  SELLER\n  BOTH\n}\n\nmodel User {\n  id              Int      @id @default(autoincrement())\n  name            String\n  email           String   @unique\n  password        String\n  urnId           String   @unique\n  role            UserRole @default(BOTH)\n  avatarUrl       String?\n  reputationScore Int      @default(0)\n  createdAt       DateTime @default(now())\n\n  // Relations\n  address          Address?\n  items            Item[]         @relation(\"UserItems\")\n  boughtItems      Transaction[]  @relation(\"BuyerTransactions\")\n  soldItems        Transaction[]  @relation(\"SellerTransactions\")\n  rentals          Rental[]       @relation(\"UserRentals\")\n  wishlist         Wishlist[]\n  reviews          Review[]\n  sentMessages     ChatMessage[]  @relation(\"SentMessages\")\n  receivedMessages ChatMessage[]  @relation(\"ReceivedMessages\")\n  notifications    Notification[]\n}\n\nmodel Address {\n  id             Int    @id @default(autoincrement())\n  userId         Int    @unique\n  collegeName    String\n  departmentName String\n  hostelName     String\n  roomNumber     String\n\n  user User @relation(fields: [userId], references: [id])\n}\n\nmodel Item {\n  id          Int      @id @default(autoincrement())\n  name        String\n  description String\n  category    String\n  price       Float\n  rentPrice   Float?\n  condition   String\n  isForRent   Boolean  @default(false)\n  status      String   @default(\"available\") // available, sold, rented\n  images      Json?\n  createdAt   DateTime @default(now())\n\n  owner         User          @relation(\"UserItems\", fields: [ownerId], references: [id])\n  ownerId       Int\n  transactions  Transaction[]\n  rentals       Rental[]\n  wishlistItems Wishlist[]\n  reviews       Review[]\n}\n\nmodel Transaction {\n  id        Int      @id @default(autoincrement())\n  buyer     User     @relation(\"BuyerTransactions\", fields: [buyerId], references: [id])\n  buyerId   Int\n  seller    User     @relation(\"SellerTransactions\", fields: [sellerId], references: [id])\n  sellerId  Int\n  item      Item     @relation(fields: [itemId], references: [id])\n  itemId    Int\n  amount    Float\n  paymentId String?\n  status    String   @default(\"pending\") // pending, completed, cancelled\n  createdAt DateTime @default(now())\n}\n\nmodel Rental {\n  id        Int      @id @default(autoincrement())\n  renter    User     @relation(\"UserRentals\", fields: [renterId], references: [id])\n  renterId  Int\n  item      Item     @relation(fields: [itemId], references: [id])\n  itemId    Int\n  startDate DateTime\n  endDate   DateTime\n  totalRent Float\n  deposit   Float\n  status    String   @default(\"active\") // active, returned, overdue\n  createdAt DateTime @default(now())\n}\n\nmodel Wishlist {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  item      Item     @relation(fields: [itemId], references: [id])\n  itemId    Int\n  createdAt DateTime @default(now())\n}\n\nmodel Review {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  item      Item     @relation(fields: [itemId], references: [id])\n  itemId    Int\n  rating    Int\n  comment   String\n  createdAt DateTime @default(now())\n}\n\nmodel Notification {\n  id        Int      @id @default(autoincrement())\n  user      User     @relation(fields: [userId], references: [id])\n  userId    Int\n  message   String\n  type      String\n  isRead    Boolean  @default(false)\n  createdAt DateTime @default(now())\n}\n\nmodel ChatMessage {\n  id         Int      @id @default(autoincrement())\n  sender     User     @relation(\"SentMessages\", fields: [senderId], references: [id])\n  senderId   Int\n  receiver   User     @relation(\"ReceivedMessages\", fields: [receiverId], references: [id])\n  receiverId Int\n  content    String\n  createdAt  DateTime @default(now())\n}\n",
  "inlineSchemaHash": "9dd787bba00a8ddda381b3b28e47c92097cda87e9da194f614148d64bd19ba40",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"urnId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"reputationScore\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"address\",\"kind\":\"object\",\"type\":\"Address\",\"relationName\":\"AddressToUser\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"UserItems\"},{\"name\":\"boughtItems\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"BuyerTransactions\"},{\"name\":\"soldItems\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"SellerTransactions\"},{\"name\":\"rentals\",\"kind\":\"object\",\"type\":\"Rental\",\"relationName\":\"UserRentals\"},{\"name\":\"wishlist\",\"kind\":\"object\",\"type\":\"Wishlist\",\"relationName\":\"UserToWishlist\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ReviewToUser\"},{\"name\":\"sentMessages\",\"kind\":\"object\",\"type\":\"ChatMessage\",\"relationName\":\"SentMessages\"},{\"name\":\"receivedMessages\",\"kind\":\"object\",\"type\":\"ChatMessage\",\"relationName\":\"ReceivedMessages\"},{\"name\":\"notifications\",\"kind\":\"object\",\"type\":\"Notification\",\"relationName\":\"NotificationToUser\"}],\"dbName\":null},\"Address\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"collegeName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"departmentName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"hostelName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"roomNumber\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AddressToUser\"}],\"dbName\":null},\"Item\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"rentPrice\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"condition\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isForRent\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"images\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"owner\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserItems\"},{\"name\":\"ownerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"transactions\",\"kind\":\"object\",\"type\":\"Transaction\",\"relationName\":\"ItemToTransaction\"},{\"name\":\"rentals\",\"kind\":\"object\",\"type\":\"Rental\",\"relationName\":\"ItemToRental\"},{\"name\":\"wishlistItems\",\"kind\":\"object\",\"type\":\"Wishlist\",\"relationName\":\"ItemToWishlist\"},{\"name\":\"reviews\",\"kind\":\"object\",\"type\":\"Review\",\"relationName\":\"ItemToReview\"}],\"dbName\":null},\"Transaction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"buyer\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"BuyerTransactions\"},{\"name\":\"buyerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"seller\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SellerTransactions\"},{\"name\":\"sellerId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"ItemToTransaction\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Rental\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"renter\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserRentals\"},{\"name\":\"renterId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"ItemToRental\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"totalRent\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"deposit\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Wishlist\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToWishlist\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"ItemToWishlist\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Review\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReviewToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"item\",\"kind\":\"object\",\"type\":\"Item\",\"relationName\":\"ItemToReview\"},{\"name\":\"itemId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"rating\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"comment\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Notification\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"NotificationToUser\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"message\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRead\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"ChatMessage\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SentMessages\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"receiver\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReceivedMessages\"},{\"name\":\"receiverId\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

