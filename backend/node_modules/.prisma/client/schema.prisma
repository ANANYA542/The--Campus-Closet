generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  BUYER
  SELLER
  BOTH
}

model User {
  id              Int      @id @default(autoincrement())
  name            String
  email           String   @unique
  password        String
  urnId           String   @unique
  role            UserRole @default(BOTH)
  avatarUrl       String?
  reputationScore Int      @default(0)
  createdAt       DateTime @default(now())

  // Relations
  address          Address?
  items            Item[]         @relation("UserItems")
  boughtItems      Transaction[]  @relation("BuyerTransactions")
  soldItems        Transaction[]  @relation("SellerTransactions")
  rentals          Rental[]       @relation("UserRentals")
  wishlist         Wishlist[]
  reviews          Review[]
  sentMessages     ChatMessage[]  @relation("SentMessages")
  receivedMessages ChatMessage[]  @relation("ReceivedMessages")
  notifications    Notification[]
}

model Address {
  id             Int    @id @default(autoincrement())
  userId         Int    @unique
  collegeName    String
  departmentName String
  hostelName     String
  roomNumber     String

  user User @relation(fields: [userId], references: [id])
}

model Item {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  category    String
  price       Float
  rentPrice   Float?
  condition   String
  isForRent   Boolean  @default(false)
  status      String   @default("available") // available, sold, rented
  images      Json?
  createdAt   DateTime @default(now())

  owner         User          @relation("UserItems", fields: [ownerId], references: [id])
  ownerId       Int
  transactions  Transaction[]
  rentals       Rental[]
  wishlistItems Wishlist[]
  reviews       Review[]
}

model Transaction {
  id        Int      @id @default(autoincrement())
  buyer     User     @relation("BuyerTransactions", fields: [buyerId], references: [id])
  buyerId   Int
  seller    User     @relation("SellerTransactions", fields: [sellerId], references: [id])
  sellerId  Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  amount    Float
  paymentId String?
  status    String   @default("pending") // pending, completed, cancelled
  createdAt DateTime @default(now())
}

model Rental {
  id        Int      @id @default(autoincrement())
  renter    User     @relation("UserRentals", fields: [renterId], references: [id])
  renterId  Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  startDate DateTime
  endDate   DateTime
  totalRent Float
  deposit   Float
  status    String   @default("active") // active, returned, overdue
  createdAt DateTime @default(now())
}

model Wishlist {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  createdAt DateTime @default(now())
}

model Review {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  item      Item     @relation(fields: [itemId], references: [id])
  itemId    Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  message   String
  type      String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
}

model ChatMessage {
  id         Int      @id @default(autoincrement())
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId Int
  content    String
  createdAt  DateTime @default(now())
}
